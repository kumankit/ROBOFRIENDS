{"version":3,"sources":["components/card.js","components/CardList.js","components/Searchbox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["card","props","className","alt","src","id","name","email","CardList","robot","cardcomponent","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflow","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobot","filter","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"oOAaeA,EAXF,SAACC,GACV,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BH,EAAMI,GAAhC,cACpB,6BACI,4BAAKJ,EAAMK,MACX,2BAAIL,EAAMM,UCUXC,EAhBE,SAAC,GAAY,IAAXC,EAAU,EAAVA,MACTC,EAAgBD,EAAME,KAAI,SAACC,EAAKC,GACnC,OACA,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAII,EAAMI,GAAGR,GACbC,KAAMG,EAAMI,GAAGP,KACfC,MAAOE,EAAMI,GAAGN,WAGpB,OACA,6BACKG,ICCMK,EAbG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAC5B,OACA,yBAAKf,UAAU,OACX,2BACEA,UAAU,mCACVgB,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCALI,EAPA,SAACpB,GACZ,OACI,yBAAKqB,MAAO,CAACC,SAAS,SAASC,OAAO,kBAAkBC,OAAO,UAC1DxB,EAAMyB,WCyCJC,G,wDApCX,aAAgB,IAAD,8BACX,gBAaJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAbzC,EAAKC,MAAQ,CACZzB,MAAM,GACNsB,YAAa,IAJH,E,gEAQM,IAAD,OAChBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACrB,MAAM8B,S,+BAOjC,IAAD,EACuBC,KAAKN,MAA1BzB,EADF,EACEA,MAAMsB,EADR,EACQA,YACPU,EAAgBhC,EAAMiC,QAAO,SAAAjC,GAC/B,OAAOA,EAAMH,KAAKqC,cAAcC,SAASb,EAAYY,kBAEzD,OAAQlC,EAAMoC,OAGd,yBAAK3C,UAAU,MACZ,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWe,aAAcuB,KAAKZ,iBAC9B,kBAAC,EAAD,KACM,kBAAC,EAAD,CAAUnB,MAAOgC,MANzB,+D,GAzBSK,c,MCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,EAAD,MACCC,SAASC,eAAe,SD0HrB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.21392648.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst card = (props) =>{\r\n    return(\r\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n            <img alt='robot' src={`https://robohash.org/${props.id}?200*200`}/>\r\n            <div>\r\n                <h2>{props.name}</h2>\r\n                <p>{props.email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default card;","import React from 'react';\r\nimport Card from './card';\r\nconst CardList = ({robot}) =>{\r\n    const cardcomponent = robot.map((user,i) => {\r\n       return (\r\n       <Card\r\n        key={i} \r\n        id={robot[i].id} \r\n        name={robot[i].name} \r\n        email={robot[i].email}/>\r\n       );\r\n    })\r\n    return (\r\n    <div>\r\n        {cardcomponent}\r\n    </div>\r\n    );\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Searchbox = ({searchfield,searchChange}) => {\r\n    return( \r\n    <div className='pa2'>\r\n        <input \r\n          className='pa3 ba b--green bg-lightest-blue'\r\n          type='search' \r\n          placeholder='search robots'\r\n          onChange={searchChange}\r\n        /> \r\n    </div>\r\n\r\n    );\r\n}\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) =>{\r\n    return (\r\n        <div style={{overflow:'scroll',border:'5px solid black',height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n};\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\n//import { render } from '@testing-library/react';\r\n\r\n\r\nclass App extends Component {\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n         robot:[],\r\n         searchField: ''\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n          .then(response => response.json())\r\n          .then(users => {this.setState({robot:users})});   \r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {robot,searchField} = this.state;\r\n        const filteredRobot = robot.filter(robot =>{\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return !robot.length ?\r\n         <h1> hey i am in loading period</h1> :\r\n        (\r\n        <div className='tc'>\r\n           <h1 className='f1'>RoboFriends</h1> \r\n           <Searchbox searchChange={this.onSearchChange}/>\r\n           <Scroll>\r\n                 <CardList robot={filteredRobot}/>\r\n           </Scroll>\r\n        </div> \r\n      );    \r\n    }   \r\n }\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'; \nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <App/>\n  ,document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}